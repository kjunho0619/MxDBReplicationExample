// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package databasereplication.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import com.mendix.logging.ILogNode;
import system.proxies.FileDocument;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class CreateZipFile extends CustomJavaAction<java.lang.Boolean>
{
	/** @deprecated use com.mendix.utils.ListUtils.map(ExportFileList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __ExportFileList;
	private final java.util.List<system.proxies.FileDocument> ExportFileList;
	/** @deprecated use TargetZipDocument.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __TargetZipDocument;
	private final system.proxies.FileDocument TargetZipDocument;
	private final java.lang.String TargetFileName;

	public CreateZipFile(
		IContext context,
		java.util.List<IMendixObject> _exportFileList,
		IMendixObject _targetZipDocument,
		java.lang.String _targetFileName
	)
	{
		super(context);
		this.__ExportFileList = _exportFileList;
		this.ExportFileList = java.util.Optional.ofNullable(_exportFileList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(exportFileListElement -> system.proxies.FileDocument.initialize(getContext(), exportFileListElement))
			.collect(java.util.stream.Collectors.toList());
		this.__TargetZipDocument = _targetZipDocument;
		this.TargetZipDocument = _targetZipDocument == null ? null : system.proxies.FileDocument.initialize(getContext(), _targetZipDocument);
		this.TargetFileName = _targetFileName;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
        final ILogNode logger = Core.getLogger(this.toString());

		// Create a buffer for reading the files
		byte[] buf = new byte[1024];

		File fDir = new File(Core.getConfiguration().getTempPath().getAbsolutePath() + File.separator + UUID.randomUUID().toString().substring(0,5));
		while (fDir.exists()) {
			fDir = new File(Core.getConfiguration().getTempPath().getAbsolutePath() + File.separator + UUID.randomUUID().toString().substring(0,5));
        }
		fDir.mkdirs();
		try {
			// Create the ZIP file
			try (ZipOutputStream out = new ZipOutputStream(new FileOutputStream(fDir.getAbsolutePath() + File.separator + this.TargetFileName))) {
                ArrayList<String> NameList = new ArrayList<>();

                // Compress the files
                for (FileDocument doc : this.ExportFileList) {
                    try (InputStream stream = Core.getFileDocumentContent(this.getContext(), doc.getMendixObject())) {
                        // Add ZIP entry to output stream.
                        String docname = checkName(NameList, doc.getName()).replaceAll("\\\\", "-");
                        NameList.add(docname);
                        if (logger.isTraceEnabled())
                            logger.trace("Add file: '" + docname + "' to zip");
                        out.putNextEntry(new ZipEntry(docname));

                        // Transfer bytes from the file to the ZIP file
                        int len;
                        while ((len = stream.read(buf)) > 0) {
                            out.write(buf, 0, len);
                        }

                        // Complete the entry
                        out.closeEntry();
                    }
                }
			}

			File zipFile = new File(fDir.getAbsoluteFile() + File.separator + this.TargetFileName);
			FileInputStream stream = new FileInputStream( zipFile );
			Core.storeFileDocumentContent(this.getContext(), this.TargetZipDocument.getMendixObject(), this.TargetFileName, stream);
			zipFile.delete();
		} catch (IOException e) {
		    logger.error(e);
			return false;
		}
		fDir.delete();

		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CreateZipFile";
	}

	// BEGIN EXTRA CODE
        private static String checkName(ArrayList<String> NameList, String Docname)
        {
            if(NameList.size() > 0)
            {
                int counter = 1;
                String checkname = Docname;
                while(containsName(NameList, checkname))
                {
                    int dotplace = Docname.lastIndexOf(".");
                    if(dotplace >= 0)
                    {
                        checkname = Docname.substring(0, dotplace)+"_"+counter+Docname.substring(dotplace, Docname.length());
                    }
                    else
                    {
                        checkname = Docname + "_"+counter;
                    }
                    counter++;
                }
                return checkname;
            }
            return Docname;
        }

        private static boolean containsName(ArrayList<String> NameList, String Docname)
        {
            for(String saved : NameList)
            {
                if(saved.equals(Docname))
                {
                    return true;
                }
            }
            return false;
        }
	// END EXTRA CODE
}

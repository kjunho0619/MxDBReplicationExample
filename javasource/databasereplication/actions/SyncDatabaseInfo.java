// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package databasereplication.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import com.mendix.webui.FeedbackHelper;
import databasereplication.implementation.ObjectBaseDBSettings;
import databasereplication.implementation.DbReader.AS400Reader;
import databasereplication.implementation.DbReader.CustomReader;
import databasereplication.implementation.DbReader.MSAccessReader;
import databasereplication.implementation.DbReader.OracleReader;
import databasereplication.implementation.DbReader.PostgresReader;
import databasereplication.implementation.DbReader.SQLServerReader;
import databasereplication.proxies.Column;
import databasereplication.proxies.Table;

public class SyncDatabaseInfo extends CustomJavaAction<java.lang.Boolean>
{
	/** @deprecated use CurDatabase.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __CurDatabase;
	private final databasereplication.proxies.Database CurDatabase;

	public SyncDatabaseInfo(
		IContext context,
		IMendixObject _curDatabase
	)
	{
		super(context);
		this.__CurDatabase = _curDatabase;
		this.CurDatabase = _curDatabase == null ? null : databasereplication.proxies.Database.initialize(getContext(), _curDatabase);
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE

		ObjectBaseDBSettings dbSettings = new ObjectBaseDBSettings(this.getContext(), this.CurDatabase.getMendixObject());

		switch (this.CurDatabase.getDatabaseType()) {
		case SQLServer2005:
		case SQLServer2008:
			SQLServerReader.processTables(this, dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			SQLServerReader.processColumns(this, dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			break;
		case Postgres:
			PostgresReader.processTables(this, dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			PostgresReader.processColumns(this, dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			break;
		case Oracle:
			OracleReader.processTables(this, dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			OracleReader.processColumns(this, dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			break;
		case AS_400:
			AS400Reader.processDatabase(dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			break;
		case Custom:
			CustomReader.processDatabase(dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			break;
		default:
			if ( "MSAccess".equalsIgnoreCase(this.CurDatabase.getDatabaseType().toString()) )
				MSAccessReader.processDatabase(dbSettings, this.getContext().createSudoClone(), this.CurDatabase);
			else
				throw new UnsupportedOperationException("The database type " + this.CurDatabase.getDatabaseType().toString() + " is not supported.");
			break;
		}

		FeedbackHelper.addRefreshClass(this.getContext(), Column.getType());
		FeedbackHelper.addRefreshClass(this.getContext(), Table.getType());

		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SyncDatabaseInfo";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}

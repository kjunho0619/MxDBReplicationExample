// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package databasereplication.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.replication.ReplicationSettings.KeyType;
import com.mendix.replication.ICustomValueParser;
import com.mendix.replication.MFValueParser;
import com.mendix.replication.MendixReplicationException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import databasereplication.implementation.DBUpdateSettings;
import databasereplication.implementation.DatabaseConnector;
import databasereplication.implementation.ObjectBaseDBSettings;
import databasereplication.interfaces.IDatabaseSettings;
import databasereplication.proxies.AssociationKeyOption;
import databasereplication.proxies.Column;
import databasereplication.proxies.ColumnMapping;
import databasereplication.proxies.Database;
import databasereplication.proxies.MappingType;
import databasereplication.proxies.QueryType;
import databasereplication.proxies.TableMapping;
import databasereplication.proxies.UpdateConfiguration;
import databasereplication.proxies.UpdateType;
import databasereplication.proxies.YesNo;
import mxmodelreflection.proxies.MxObjectMember;
import mxmodelreflection.proxies.MxObjectReference;
import mxmodelreflection.proxies.MxObjectType;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

public class UpdateByMapping extends CustomJavaAction<java.lang.Boolean>
{
	/** @deprecated use Mapping.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Mapping;
	private final databasereplication.proxies.TableMapping Mapping;
	private final IMendixObject UpdatedObject;
	/** @deprecated use UpdateConfig.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __UpdateConfig;
	private final databasereplication.proxies.UpdateConfiguration UpdateConfig;

	public UpdateByMapping(
		IContext context,
		IMendixObject _mapping,
		IMendixObject _updatedObject,
		IMendixObject _updateConfig
	)
	{
		super(context);
		this.__Mapping = _mapping;
		this.Mapping = _mapping == null ? null : databasereplication.proxies.TableMapping.initialize(getContext(), _mapping);
		this.UpdatedObject = _updatedObject;
		this.__UpdateConfig = _updateConfig;
		this.UpdateConfig = _updateConfig == null ? null : databasereplication.proxies.UpdateConfiguration.initialize(getContext(), _updateConfig);
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		if( this.Mapping == null )
			throw new CoreException("Please provide a valid mapping");
		if( this.Mapping == null )
			throw new CoreException("Please provide an object to send to the other database");
		
		IContext context = this.getContext();
		Database CurDatabase = this.Mapping.getTableMapping_Database(context);
		ObjectBaseDBSettings dbSettings = new ObjectBaseDBSettings( context, CurDatabase.getMendixObject() );
		updateDatabase(context, this.Mapping, this.UpdateConfig, dbSettings, this.UpdatedObject);
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "UpdateByMapping";
	}

	// BEGIN EXTRA CODE
	private static final ILogNode _logger = Core.getLogger("UpdateMapping");
	
	public static void updateDatabase(IContext context, TableMapping mapping, UpdateConfiguration updateConfig, IDatabaseSettings dbSettings, IMendixObject updatedObject) 
		throws MendixReplicationException, CoreException 
	{
		DBUpdateSettings settings = setupUpdateSettings(context, mapping, updateConfig, dbSettings);
		
		doDatabaseUpdate(dbSettings, updatedObject, settings);
	}

	protected static DBUpdateSettings setupUpdateSettings( IContext context, TableMapping mapping, UpdateConfiguration updateConfig, IDatabaseSettings dbSettings ) throws CoreException, MendixReplicationException {
		String tableName = mapping.getTableMapping_Table(context).getName();
		
		String objectTypeName = mapping.getTableMapping_MxObjectType(context).getCompleteName();
		
		DBUpdateSettings settings = new DBUpdateSettings(context, dbSettings, objectTypeName, updateConfig.getUpdateType());		
		settings.setUpdateTable( mapping.getTableMapping_Table(context).getName() );		
		List<IMendixObject> colMapping = Core.retrieveXPathQuery(context, "//" + ColumnMapping.getType() + "[" + ColumnMapping.MemberNames.ColumnMapping_TableMapping + "=" + mapping.getMendixObject().getId().toLong() + "]");
		for( IMendixObject object : colMapping ) {
			
			String loggingDetails = "(" + (String) object.getValue(context, ColumnMapping.MemberNames.Info_DbMapping.toString()) + " / " + (String) object.getValue(context, ColumnMapping.MemberNames.Info_MxMapping.toString()) + ")" ;
			
			AssociationKeyOption isKeyOption = AssociationKeyOption.valueOf( (String)object.getValue(context, ColumnMapping.MemberNames.IsAssociationKey.toString()));
			KeyType isKey = null;
			switch (isKeyOption) {
			case No:
				isKey = KeyType.NoKey;
				break;
			case YesOnlyMainObject:
				isKey = KeyType.ObjectKey;
				break;
			case YesOnlyAssociatedObject:
				isKey = KeyType.AssociationKey;
				break;
			case YesMainAndAssociatedObject:
				isKey = KeyType.AssociationAndObjectKey;
				break;
			}

			ICustomValueParser parser = null;
			if( YesNo.Yes == YesNo.valueOf((String)object.getValue(context, ColumnMapping.MemberNames.UseFormatMicroflow.toString()) ) ) {
				IMendixIdentifier mfId = (IMendixIdentifier)object.getValue(context, ColumnMapping.MemberNames.ColumnMapping_Microflows.toString());
				if( mfId == null )
					throw new CoreException("No format microflow found when there should be one, for column: " + loggingDetails);
				parser = new MFValueParser(context, Core.retrieveId(context, mfId ));
			}
			
			Core.retrieveId(context, (IMendixIdentifier) object.getValue(context, ColumnMapping.MemberNames.ColumnMapping_AdditionalJoins.toString()));
			IMendixObject column = Core.retrieveId(context, (IMendixIdentifier)object.getValue(context, ColumnMapping.MemberNames.ColumnMapping_Column.toString()));

			if( QueryType.Automatic.toString().equals(object.getValue(context, ColumnMapping.MemberNames.QueryType.toString())) ) {
				IMendixIdentifier memberId = (IMendixIdentifier)object.getValue(context, ColumnMapping.MemberNames.ColumnMapping_MxObjectMember.toString());
				if( memberId == null )
					throw new CoreException("No member selected in column " + loggingDetails);
				
				IMendixObject member = Core.retrieveId(context, memberId);
				
				
				if( MappingType.Attribute.toString().equals(object.getValue(context, ColumnMapping.MemberNames.MappingType.toString())) ) {
					settings.addAttributeMapping(tableName, (String)column.getValue(context, Column.MemberNames.Name.toString()),
							(String) column.getValue(context, Column.MemberNames.DataType.toString()),
							(String)member.getValue(context, MxObjectMember.MemberNames.AttributeName.toString()), isKey,
							(Boolean)object.getValue(context, ColumnMapping.MemberNames.SearchCaseSensitive.toString()), parser).shouldPushNullValue(updateConfig.getPushNULLValues() );
				}
				else {
					IMendixObject reference = Core.retrieveId(context, (IMendixIdentifier)object.getValue(context, ColumnMapping.MemberNames.ColumnMapping_MxObjectReference.toString()));
					IMendixObject objectType = Core.retrieveId(context, (IMendixIdentifier)object.getValue(context, ColumnMapping.MemberNames.ColumnMapping_MxObjectType.toString()));

					settings.addAssociationMapping(tableName, (String)column.getValue(context, Column.MemberNames.Name.toString()),
							(String) column.getValue(context, Column.MemberNames.DataType.toString()),
							(String)reference.getValue(context, MxObjectReference.MemberNames.CompleteName.toString()),
							(String)objectType.getValue(context, MxObjectType.MemberNames.CompleteName.toString()),
							(String)member.getValue(context, MxObjectMember.MemberNames.AttributeName.toString()),
							isKey, (Boolean)object.getValue(context, ColumnMapping.MemberNames.SearchCaseSensitive.toString()), parser).shouldPushNullValue(updateConfig.getPushNULLValues());
				}
			}
			else {
				settings.addStaticColumnMapping( tableName, (String)column.getValue(context, Column.MemberNames.Name.toString()),
						(String) object.getValue(context, ColumnMapping.MemberNames.SelectStatement.toString()),
						isKey, (Boolean)object.getValue(context, ColumnMapping.MemberNames.SearchCaseSensitive.toString()) ).shouldPushNullValue(updateConfig.getPushNULLValues() );
			}
		}

		if (mapping.getUseCustomConstraints() == YesNo.Yes)
			settings.setConstraint(mapping.getSQLConstraint(context));
		return settings;
	}
	
	protected static void doDatabaseUpdate( IDatabaseSettings dbSettings, IMendixObject updatedObject, DBUpdateSettings settings ) throws MendixReplicationException, CoreException {
		String query = settings.getQuery(updatedObject);
		if (_logger.isDebugEnabled())
			_logger.debug(query);
		try (DatabaseConnector dbc = new DatabaseConnector(dbSettings);
			Statement statement = dbc.getConnection().createStatement()) {
			int nrOfUpdates = statement.executeUpdate(query);
			if (_logger.isDebugEnabled())
				_logger.debug("Updated " + nrOfUpdates + " records using query: " + query);
			if( nrOfUpdates == 0 && settings.getUpdateType() == UpdateType.UpdateOrInsert ) {
				query = settings.getUpdateQuery(UpdateType.AlwaysInsert, updatedObject);
				if (_logger.isDebugEnabled())
					_logger .debug(query);
				int nrOfInserts = statement.executeUpdate(query);
				if (_logger.isDebugEnabled())
					_logger.debug("Inserted " + nrOfInserts + " records using query: " + query);
			}
		} catch (SQLException e) {
			throw new MendixReplicationException("Error while executing query: " + query, e);
		}
	}
	// END EXTRA CODE
}
